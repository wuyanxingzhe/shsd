'use client';

import { useState } from 'react';
import { Box, Typography, Button, Tooltip, Menu, MenuItem, ListItemIcon, ListItemText } from '@mui/material';
import { useTranslation } from 'react-i18next';
import AutoFixHighIcon from '@mui/icons-material/AutoFixHigh';
import DeleteIcon from '@mui/icons-material/Delete';
import AddIcon from '@mui/icons-material/Add';
import ArrowDropDownIcon from '@mui/icons-material/ArrowDropDown';
import DatasetIcon from '@mui/icons-material/Dataset';
import ChatIcon from '@mui/icons-material/Chat';

export default function QuestionsPageHeader({
  questionsTotal,
  selectedQuestionsCount,
  onBatchDeleteQuestions,
  onOpenCreateDialog,
  onBatchGenerateAnswers,
  onAutoGenerateDatasets,
  onAutoGenerateMultiTurnDatasets
}) {
  const { t } = useTranslation();
  const [anchorEl, setAnchorEl] = useState(null);
  const open = Boolean(anchorEl);

  const handleMenuClick = event => {
    setAnchorEl(event.currentTarget);
  };

  const handleMenuClose = () => {
    setAnchorEl(null);
  };

  const handleSingleTurnGenerate = () => {
    handleMenuClose();
    onAutoGenerateDatasets();
  };

  const handleMultiTurnGenerate = () => {
    handleMenuClose();
    onAutoGenerateMultiTurnDatasets();
  };

  return (
    <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 3 }}>
      <Typography variant="h4">
        {t('questions.title')} ({questionsTotal})
      </Typography>
      <Box sx={{ display: 'flex', gap: 2 }}>
        <Button
          variant="outlined"
          color={selectedQuestionsCount > 0 ? 'error' : 'primary'}
          startIcon={<DeleteIcon />}
          onClick={onBatchDeleteQuestions}
          disabled={selectedQuestionsCount === 0}
        >
          {t('questions.deleteSelected')}
        </Button>

        <Button variant="contained" startIcon={<AddIcon />} onClick={onOpenCreateDialog}>
          {t('questions.createQuestion')}
        </Button>

        <Button
          variant="contained"
          startIcon={<AutoFixHighIcon />}
          onClick={onBatchGenerateAnswers}
          disabled={selectedQuestionsCount === 0}
        >
          {t('questions.batchGenerate')}
        </Button>

        <Tooltip
          title={t('questions.autoGenerateDatasetTip', {
            defaultValue: '创建后台批量处理任务：自动查询待生成答案的问题并生成数据集'
          })}
        >
          <Button
            variant="outlined"
            color="secondary"
            startIcon={<AutoFixHighIcon />}
            endIcon={<ArrowDropDownIcon />}
            onClick={handleMenuClick}
          >
            {t('questions.autoGenerateDataset', { defaultValue: '自动生成数据集' })}
          </Button>
        </Tooltip>

        <Menu
          anchorEl={anchorEl}
          open={open}
          onClose={handleMenuClose}
          anchorOrigin={{
            vertical: 'bottom',
            horizontal: 'right'
          }}
          transformOrigin={{
            vertical: 'top',
            horizontal: 'right'
          }}
        >
          <MenuItem onClick={handleSingleTurnGenerate}>
            <ListItemIcon>
              <DatasetIcon fontSize="small" />
            </ListItemIcon>
            <ListItemText primary={t('questions.generateSingleTurnDataset', { defaultValue: '生成单轮对话数据集' })} />
          </MenuItem>
          <MenuItem onClick={handleMultiTurnGenerate}>
            <ListItemIcon>
              <ChatIcon fontSize="small" />
            </ListItemIcon>
            <ListItemText primary={t('questions.generateMultiTurnDataset', { defaultValue: '生成多轮对话数据集' })} />
          </MenuItem>
        </Menu>
      </Box>
    </Box>
  );
}
